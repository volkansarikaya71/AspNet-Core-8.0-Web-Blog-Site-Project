@model EntityLayer.Concrete.Blog
@{
    ViewData["Title"] = "BlogAdd";
    Layout = "~/Views/Shared/WriterLayout.cshtml";
}

<h1>Yeni Blog Ekleme</h1>
<br />
<form class="form-group" method="post" enctype="multipart/form-data">
    @using (Html.BeginForm("BlogAdd", "Blog", FormMethod.Post))
    {
        @Html.Label("Blog Başlığı")
        @Html.TextBoxFor(x => x.BlogTitle, new { @class = "form-control" })
        <br />
        @Html.ValidationMessageFor(x => x.BlogTitle, "", new { @class = "text-danger" })
        <br />
        @Html.Label("Blog Görseli")
        <div>
            <input type="file" name="BlogImageLocation" asp-for="BlogThumbnailImage" id="BlogImageLocation" onchange="previewImage(event)" />
            <br />
            @Html.ValidationMessageFor(x => x.BlogImageLocation, "", new { @class = "text-danger" })
        </div>
        <br />
        <div>
            <img id="imagePreview" src="#" alt="Blog Görseli" style="display:none; max-width: 100%; height: auto;" />
        </div>
        <br />
        @Html.Label("Kategori")
        @Html.DropDownListFor(x => x.CategoryId, (List<SelectListItem>)ViewBag.cv, "Kategori Seçin", new { @class = "form-control", name = "Dropbox" })
        <br />
        @Html.ValidationMessageFor(x => x.CategoryId, "", new { @class = "text-danger" })
        <br />
        @Html.Label("Blog içeriği")
        @Html.TextAreaFor(x => x.BlogContent, 12, 3, new { @class = "form-control" })
        <br />
        @Html.ValidationMessageFor(x => x.BlogContent, "", new { @class = "text-danger" })
        <br />
        <button @* id="btn2" *@ class="btn btn-info">Kaydet</button>
        <a href="/Blog/BlogListByWriter/" class="btn btn-danger">İptal</a>

    }
</form>

<script>
    // Resim önizleme fonksiyonu
    function previewImage(event) {
        // FileReader nesnesi oluşturuluyor
        var reader = new FileReader();

        // Dosya okuma işlemi tamamlandığında çalışacak fonksiyon
        reader.onload = function () {
            // Resim öğesi seçiliyor
            var output = document.getElementById('imagePreview');
            // Okunan dosya verisini img öğesinin src özelliğine atıyoruz
            output.src = reader.result;
            // Görünür hale getiriyoruz (ilk başta gizliydi)
            output.style.display = 'block';
        };

        // Kullanıcı tarafından seçilen dosyayı okuma işlemi başlatılıyor
        reader.readAsDataURL(event.target.files[0]);
    }
</script>












@*

<script>
    $('#btn2').click(function (event) {
        event.preventDefault(); // Varsayılan davranışı engelle.

        // Formdaki verileri al ve sunucuya gönder
        var form = $(this).closest('form'); // Bu butonun ait olduğu formu seç
        $.ajax({
            url: form.attr('action'), // Formun action değerini al (/Blog/EditBlog)
            type: form.attr('method'), // Formun method değerini al (POST olmalı)
            data: form.serialize(), // Formdaki verileri JSON formatında al
            success: function () {
                // Güncelleme başarılı olduğunda
                swal({
                    title: "Kayıt Edildi",
                    text: "Başarılı Bir Şekilde Blogunuz Eklendi!",
                    icon: "success",
                    button: "Tamam!",
                }).then((value) => {
                    // "Tamam!" butonuna basıldığında yönlendir
                    window.location.href = "/Blog/BlogListByWriter"; // Yönlendirilecek URL
                });
            }
        });
    });
</script>

 *@
